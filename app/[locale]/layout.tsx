import type { Metadata } from "next";
import { Montserrat, Geist, Geist_Mono } from "next/font/google";
import localFont from "next/font/local";
import "./globals.css";
import { I18nProviderClient } from "@/locales/client";
import { ReactElement } from "react";
import Header from "@/components/layout/header";
import Footer from "@/components/layout/footer";

// Load Montserrat for English
const montserrat = Montserrat({
  variable: "--font-montserrat",
  subsets: ["latin"],
  display: "swap",
});

// Load Montserrat-Arabic as local font
const montserratArabic = localFont({
  src: [
    {
      path: "../../public/fonts/Montserrat-Arabic Thin 250.otf",
      weight: "100",
      style: "normal",
    },
    // {
    //   path: "../public/fonts/Montserrat-Arabic ExtraLight 275.otf",
    //   weight: "200",
    //   style: "normal",
    // },
    // {
    //   path: "../public/fonts/Montserrat-Arabic Light 300.otf",
    //   weight: "300",
    //   style: "normal",
    // },
    // {
    //   path: "../public/fonts/Montserrat-Arabic Regular 400.otf",
    //   weight: "400",
    //   style: "normal",
    // },
    // {
    //   path: "../public/fonts/Montserrat-Arabic Medium 500.otf",
    //   weight: "500",
    //   style: "normal",
    // },
    // {
    //   path: "../public/fonts/Montserrat-Arabic-SemiBold 600.otf",
    //   weight: "600",
    //   style: "normal",
    // },
    // {
    //   path: "../public/fonts/Montserrat-Arabic-Bold 700.otf",
    //   weight: "700",
    //   style: "normal",
    // },
    // {
    //   path: "../public/fonts/Montserrat-Arabic-ExtraBold 800.otf",
    //   weight: "800",
    //   style: "normal",
    // },
    // {
    //   path: "../public/fonts/Montserrat-Arabic-Black 900.otf",
    //   weight: "900",
    //   style: "normal",
    // },
  ],
  variable: "--font-montserrat-arabic",
  display: "swap",
});

// Keep Geist fonts for code and UI accents
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Pick",
  description: "Generated by pick",
};

export default async function RootLayout({
  params,
  children,
}: {
  params: Promise<{ locale: string }>;
  children: ReactElement;
}) {
  const { locale } = await params;

  // Determine text direction based on locale
  const direction = locale === "ar" ? "rtl" : "ltr";
  const isArabic = locale === "ar";

  return (
    <html lang={locale} dir={direction}>
      <body
        className={`
          ${geistSans.variable} 
          ${geistMono.variable} 
          ${isArabic ? montserratArabic.variable : montserrat.variable}
          ${isArabic ? "font-ar" : "font-en"}
          antialiased min-h-screen flex flex-col
        `}
      >
        <I18nProviderClient locale={locale}>
          <Header />
          <main className="flex-grow">{children}</main>
          <Footer />
        </I18nProviderClient>
      </body>
    </html>
  );
}

// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";
// import { I18nProviderClient } from "@/locales/client";
// import { ReactElement } from "react";
// import Header from "@/components/layout/header";
// import Footer from "@/components/layout/footer";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Pick",
//   description: "Generated by pick",
// };

// export default async function RootLayout({
//   params,
//   children,
// }: {
//   params: Promise<{ locale: string }>;
//   children: ReactElement;
// }) {
//   const { locale } = await params;

//   // Determine text direction based on locale
//   const direction = locale === "ar" ? "rtl" : "ltr";

//   return (
//     <html lang={locale} dir={direction}>
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen flex flex-col`}
//       >
//         <I18nProviderClient locale={locale}>
//           <Header />
//           <main className="flex-grow">{children}</main>
//           <Footer />
//         </I18nProviderClient>
//       </body>
//     </html>
//   );
// }
